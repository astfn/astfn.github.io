<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test admin</title>
    <url>/2021/04/25/test-admin/</url>
    <content><![CDATA[<h1 id="test-Admin"><a href="#test-Admin" class="headerlink" title="test Admin"></a>test Admin</h1><p>use Admin create markdown 😀</p>
]]></content>
  </entry>
  <entry>
    <title>关于我</title>
    <url>/2021/05/04/%E5%85%B3%E4%BA%8E%E6%88%91/</url>
    <content><![CDATA[ <style>
      span.ashun {
        color: #d35400;
        font-weight: bold;
      }
      .active {
        display: inline-block;
        animation: active 0.8s 2 linear;
        letter-spacing: 0.4rem;
      }
      @keyframes active {
        25% {
          color: #ecf0f1;
          transform: scale(1.2);
        }
        40% {
          color: #9b59b6;
          transform: scale(1.5);
        }
        50% {
          color: #546de5;
          transform: scale(2);
        }
        60% {
          color: #e67e22;
          transform: scale(1.5);
        }
        80% {
          color: pink;
          transform: scale(1.2);
        }
      }
       strong.Ashun{
     font-size:20px;
     display:block;
     text-align:center;
       }
    </style><body>



<p>   <strong class="Ashun">无论我怎样改变，都是那个少年</strong></p>
<script>let div = document.querySelector("strong.Ashun");let text = div.innerText;[...text].reduce((pre, val) => {pre == 0 && (div.innerHTML = "");let span = document.createElement("span");span.classList.add("ashun");span.innerText = val;div.append(span);span.addEventListener("mouseenter", (e) => {e.target.classList.add("active");});span.addEventListener("animationend", (e) => {e.target.classList.remove("active");});}, 0);</script></body>

<iframe src="//player.bilibili.com/player.html?aid=672756810&bvid=BV1CU4y1b7Sx&cid=332877650&page=1&danmaku=0" scrolling="no" style="border-radius:15px;" frameborder="no" framespacing="0" allowfullscreen="false"> </iframe>

]]></content>
      <tags>
        <tag>关于我</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2021/04/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Ashuntefannao"><a href="#Ashuntefannao" class="headerlink" title="Ashuntefannao"></a>Ashuntefannao</h1><blockquote>
<p>这是我的第一个博客项目,时间原因，后续持续更新……</p>
</blockquote>
<iframe src="//player.bilibili.com/player.html?aid=50256015&bvid=BV1jb411G7Ks&cid=88079872&page=1&danmaku=0" scrolling="no" style="border-radius:15px;" frameborder="no" framespacing="0" allowfullscreen="false"> </iframe>

<p><img src="/2021/04/22/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/Ashun.png" alt="Ashun.png"></p>
<p>test</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">&quot;Ashuntefannao&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> b=<span class="string">&quot;Const&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">args=&#123;name,age&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.arguments=args</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.arguments.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;this is a test String&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>第一篇博客</tag>
      </tags>
  </entry>
  <entry>
    <title>封装类express服务</title>
    <url>/2021/04/25/%E5%B0%81%E8%A3%85%E7%B1%BBexpress%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>之前我们完成了以下功能，并做了抽离</p>
<ul>
<li>响应各种类型的文件</li>
<li>路由业务的扩展</li>
<li>404处理</li>
</ul>
<p>但是缺点还是很多的，比如</p>
<ul>
<li>没有对不同的请求类型进行分类处理</li>
<li>业务逻辑不够清晰</li>
<li>代码冗余</li>
</ul>
<p>我们可以基于之前的功能，封装一个类express的服务，这样管理起来就比较方便，并且按不同的请求类型进行了分类。</p>
<h3 id="封装思路"><a href="#封装思路" class="headerlink" title="封装思路"></a>封装思路</h3><h4 id="express"><a href="#express" class="headerlink" title="express"></a>express</h4><p>既然要封装类express服务，就要先了解express的基本使用方法。</p>
<p>路由处理（在真正使用express时，下面的app为express实例）</p>
<ul>
<li><code>app.get(&quot;path&quot;,(req,res)=&gt;&#123;……&#125;)</code></li>
<li><code>app.post(&quot;path&quot;,(req,res)=&gt;&#123;……&#125;)</code></li>
<li>其他请求处理在此省略</li>
</ul>
<p>扩展API</p>
<ul>
<li><code>req.body</code>获取post请求传参</li>
<li><code>res.send(data)</code>向Browser响应信息<ul>
<li>以下封装，将此API压入app</li>
</ul>
</li>
</ul>
<hr>
<h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>​    外部使用<code>app.get/post</code>时，会传入对应的处理函数，我们会根据 <code>请求类型、pathName</code> 压入到内置<code>Global</code>变量的对应属性中，在接收请求时，再根据 <code>请求类型、pathName</code> 找到并执行对应的处理函数即可。</p>
<ul>
<li><p>当请求类型为<code>POST</code>时，涉及到参数的接收，以及API的配置。</p>
</li>
<li><p>向app添加静态方法<code>get/post</code>，供外部使用。</p>
</li>
<li><p>我们将封装的功能抽离到外部<code>./modules/createDefaultServer.js</code></p>
</li>
</ul>
<p><code>./modules/createDefaultServer.js</code>代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; url &#125; = <span class="built_in">require</span>(<span class="string">&quot;inspector&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staticPath = <span class="string">&quot;public&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> mimePath = <span class="string">&quot;./modules/mime.json&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileType</span>(<span class="params">pathName, mimePath, staticPath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> mimeJSON = <span class="built_in">JSON</span>.parse(_fs.readFileSync(mimePath));</span><br><span class="line">  <span class="keyword">let</span> extName = _path.extname(pathName);</span><br><span class="line">  <span class="keyword">return</span> mimeJSON[extName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDefaultServer</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reqUrl = req.url === <span class="string">&quot;/&quot;</span> ? <span class="string">&quot;/index.html&quot;</span> : req.url;</span><br><span class="line">  <span class="keyword">const</span> pathName = _url.parse(reqUrl).pathname;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (reqUrl !== <span class="string">&quot;/favicon.ico&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">`<span class="subst">$&#123;getFileType(pathName, mimePath)&#125;</span>;charset=&quot;utf-8&quot;`</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> fileData = _fs.readFileSync(staticPath + pathName);</span><br><span class="line">      res.end(fileData);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类express的基本服务</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">expressServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> G = &#123; <span class="attr">_get</span>: &#123;&#125;, <span class="attr">_post</span>: &#123;&#125;, <span class="attr">_staticPath</span>: staticPath &#125;;</span><br><span class="line">  <span class="keyword">let</span> app = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    createDefaultServer(req, res, G.staticPath);	<span class="comment">//创建基本服务</span></span><br><span class="line">    <span class="comment">//express服务处理</span></span><br><span class="line">    <span class="keyword">const</span> reqMethod = req.method.toLowerCase();</span><br><span class="line">    <span class="keyword">const</span> pathName = _url.parse(req.url).pathname;</span><br><span class="line">    <span class="keyword">if</span> (G[<span class="string">`_<span class="subst">$&#123;reqMethod&#125;</span>`</span>][pathName]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (reqMethod == <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        G[<span class="string">`_get`</span>][pathName](req, res);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (reqMethod == <span class="string">&quot;post&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> postData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        req.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">          postData += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line">        req.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          req.body = _url.parse(postData, <span class="literal">true</span>).query;</span><br><span class="line">          G[<span class="string">`_post`</span>][pathName](req, res);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span> &#125;);</span><br><span class="line">      res.write(<span class="string">&quot;&lt;head&gt;&lt;meta charset=&#x27;UTF-8&#x27;/&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">      res.end(<span class="string">&quot;找不到该资源！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  app.get = <span class="function">(<span class="params">pathName, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    G[<span class="string">`_get`</span>][pathName] = callback;</span><br><span class="line">  &#125;;</span><br><span class="line">  app.post = <span class="function">(<span class="params">pathName, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    G[<span class="string">`_post`</span>][pathName] = callback;</span><br><span class="line">  &#125;;</span><br><span class="line">  app.send = <span class="function">(<span class="params">req, res, content</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pathName = _url.parse(req.url).pathname;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">`<span class="subst">$&#123;getFileType(pathName, mimePath)&#125;</span>;charset=&quot;utf-8&quot;`</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(content);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = expressServer();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>入口文件代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> _fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staticPath = <span class="string">&quot;public&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> _ejs = <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="built_in">require</span>(<span class="string">&quot;./modules/createDefaultServer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8086</span>;</span><br><span class="line">_http.createServer(app).listen(port); <span class="comment">//异步执行，下面的请求已经被压入到封装方法的G中</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> Params = &#123;</span><br><span class="line">    content: <span class="string">&quot;Ashuntefannao&quot;</span>,</span><br><span class="line">    list: [<span class="string">&quot;login&quot;</span>, <span class="string">&quot;testEjs&quot;</span>, <span class="string">&quot;Ashun&quot;</span>],</span><br><span class="line">  &#125;;</span><br><span class="line">  _ejs.renderFile(<span class="string">&quot;./views/login.ejs&quot;</span>, Params, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">`text/html;charset=&#x27;utf-8&#x27;`</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/main.html&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;/main.html send POST Request&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>后台语言</category>
        <category>Node.js</category>
        <category>原生node</category>
      </categories>
  </entry>
</search>
